# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details

config: &config
  working_directory: /go/src/github.com/kryptn/modulario
  docker:
    - image: google/cloud-sdk:167.0.0-alpine

decrypt: &decrypt
  name: Decrypt creds
  command: |
      echo $GCP_KEY > key.enc
      base64 -d key.enc > ~/key.json
      gcloud auth activate-service-account --key-file ~/key.json

version: 2.0
jobs:
  setup:
    docker:
      - image: alpine
    working_directory: /go/src/github.com/kryptn/modulario
    steps:
      - run: echo "just running"
  build:
    << : *config
    steps:
      - checkout
      - run: *decrypt
      - setup_remote_docker
      - run:
          name: Install Docker client
          command: |
              set -x
              VER="17.03.0-ce"
              curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
              tar -xz -C /tmp -f /tmp/docker-$VER.tgz
              mv /tmp/docker/* /usr/bin
      - run:
          name: Build Container
          command: |
              TAG=0.1.$CIRCLE_BUILD_NUM
              docker build --build-arg GITHUB_TOKEN=$GITHUB_TOKEN -t modulario/app -f infra/Dockerfile .
              docker tag modulario/app us.gcr.io/modulario-177306/app:$TAG
              docker tag modulario/app us.gcr.io/modulario-177306/app:latest
              gcloud docker -- push us.gcr.io/modulario-177306/app
  deploy:
    << : *config
    steps:
      - checkout
      - run: *decrypt
      - run:
          name: Deploy to Container Engine
          command: |
              gcloud components install kubectl
              gcloud config set project modulario-177306
              gcloud config set compute/zone us-west1-a
              gcloud container clusters get-credentials modulario
              find ./infra -type f -exec sed -i -e 's/#MODULARIO_VERSION#/0.1.'"$((CIRCLE_BUILD_NUM - 1))"'/g' {} \;
              kubectl apply -f infra/k8s/v1/
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - setup
      - build:
          requires:
            - setup
          context: org-global
      - deploy:
          requires:
            - build
          context: org-global
